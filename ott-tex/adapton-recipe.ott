embed {{ tex-preamble
\usepackage{charter}
%\usepackage{euler}
\usepackage{inconsolata}
\usepackage{mathabx} % for otriangleup
\usepackage{MnSymbol} % for cupdot
\usepackage{xcolor}
\usepackage{makecell}
}}

metavar x , y , z ::=
{{ coq nat}} {{ coq-equality }}

grammar

terminals :: 'terminals_' ::=
| |-> :: :: mapsto {{ tex \mapsto }}
| |/-> :: :: notmapsto {{ tex \not\mapsto }}
| \ :: :: lambda {{ tex \lambda }}
| !! :: :: downarrow {{ tex \Downarrow }}
| |- :: :: vdash {{ tex \vdash }}
| != :: :: noteq {{ tex  \neq }}
| /= :: :: noteqSlash {{ tex  \neq }}
| ~~ :: :: approx {{ tex  \approx }}
| ~/~ :: :: notApprox {{ tex \not\approx }}

% | == :: :: equiv {{ tex \equiv }}
% | forall :: :: forall {{ tex \forall }}
% | exists :: :: exists {{ tex \exists }}
% | %% :: :: apart {{ tex \otriangleup }}
% | -> :: :: rightarrow {{ tex \texttt{->} }}
% | => :: :: thickrightarrow {{ tex \texttt{=>} }}
% | := :: :: defineOrAssign {{ tex \mathrel{\texttt:\texttt=} }}
% | * :: :: cdot {{ tex \texttt{*} }}
% | ^* :: :: stepStar {{ tex \texttt{\^{}*} }}
% | +* :: :: plusStar {{ tex \texttt{+*} }}
% | & :: :: amp {{ tex \texttt{\&} }}
% | ! :: :: bang {{ tex \texttt{!} }}
% | @ :: :: at {{ tex \texttt{@} }}
% | >> :: :: mapOp {{ tex \texttt{>>} }}
% | % :: :: projectOp {{ tex \texttt{\%} }}
% | ~ :: :: tilde {{ tex \texttt{\textasciitilde} }} {{ com Text ascii tilde. }}
% | ;; :: :: dsemi {{ tex {~|~} }}
% | ~> :: :: leadsto {{ tex \leadsto }}
% | --> :: :: lra {{ tex \longrightarrow }}
% | #elipses :: :: eplises {{ tex \cdots }}
% | #empty :: :: empty {{ tex \epsilon }}

formula :: 'formula_' ::=
 | judgement :: :: judgement
 | Store ( pp ) =  cell :: :: storeGetCell
 | Graph ( pp ) =  node :: :: graphGetNode
 | Graph ( ppp ) =  node :: :: graphGetNodePrecisely
 | Graph ( n ) = edge :: :: graphGetEdge
 | Graph1 = Graph2 :: :: graphEqual
 | Store1 == Store2 :: :: storeEquiv {{ tex [[Store1]] \equiv [[Store2]] }}
 | v1 = v2 :: :: equal
 | v1 /= v2 :: :: notEqualValue
 | e1 /= e2 :: :: notEqualExpression
 | d1 = d2 :: :: dimensionEqual
 | m1 = m2 :: :: metaMomentEqual
 | StoreValueOption1 /= StoreValueOption2 :: :: notEqualValueStoreOption
 | Space1 /= Space2 :: :: notEqualSpace
 | Space1 = Space2 :: :: spaceEqual
 | Moment1 = Moment2 :: :: momentEqual
 | Moment1 != Moment2 :: :: momentNotEqual
 | pp1 = pp2 :: :: fullPointerEqual
 | ppp1 = ppp2 :: :: reallyFullPointerEqual
 | pp \notin Path :: :: pointerNotInPath {{ tex [[pp]] \not\in [[Path]] }}
 | formula1 \/ formula2 :: :: and {{ tex [[formula1]] \bigvee [[formula2]] }}
 | ( formula ) :: :: formula {{ tex \left([[formula]]\right) }}
 | addEdge ( Graph1 , edge ) = ( Graph2 , n ) :: M :: addEdge


s :: 's_' ::= {{ com Symbols. }}
 | literal :: :: literal {{ tex \cdots }} {{ com Literal number, string, or symbol (program identifier). }}
 | s1 - s2 :: :: dash {{ com Dash binary from. }}
 | s1 . s2 :: :: dot {{ com Dot binary. }}
 | s1 ( s2 ) :: :: app {{ com App binary form. }}

cell {{ tex c }} :: 'cell_' ::= {{ com Cells. }}
 | NonThunk v :: :: NonThunk {{ com Non-thunk. }} {{ tex [[v]] }}
 | Thunk ( Space , e , StoreValueOption ) :: :: Thunk {{ com Thunk. }} {{ tex \left<[[Space]], [[e]], [[StoreValueOption]]\right> }}

Store {{ tex \sigma }} :: 'Store_' ::= {{ com Stores. }}
 | empty :: :: empty {{ com Empty. }} {{ tex \cdot }}
 | pp |-> cell :: :: cell {{ com Cell. }}
 | Store1 , Store2 :: :: union {{ com Disjoint union. }} {{ tex [[Store1]] \cupdot [[Store2]] }}
 | Store { pp |-> cell } :: M :: updateCell {{ com Cell update. }}
 | Store { pp |-> ( Space , v ) } :: M :: updateValue {{ com Defined as two cases, on $[[v]]$. }}
 | Store { pp |/-> } :: M :: removePointer {{ com Remove cell at pointer $[[pp]]$. }}

StoreValueOption {{ tex \tilde{v} }} :: 'StoreValueOption_' ::= {{ com Optional thunk cache (store and value). }}
 | empty :: :: empty {{ tex \bullet }} {{ com None. }}
 | ( Store , v ) :: :: value {{ com Some store~$[[Store]]$ and value~$[[v]]$. }} {{ tex \left<[[Store]], [[v]]\right> }}
 | _ :: M :: wildCardPattern

p :: 'p_' ::= {{ com Pointers (spatial component only). }}
 | Space :: :: pointer {{ com Space $[[Space]]$. }}

pp {{ tex \tilde{p} }}, qq {{ tex \tilde{q} }} :: 'pp_' ::= {{ com Full pointers. }}
 | ( Space , Moment ) ^ d :: :: pointer {{ tex \left<[[Space]],[[Moment]]\right>^{[[d]]} }} {{ com Space $[[Space]]$ and moment $[[Moment]]$, dimension order~$[[d]]$. }}

d :: 'd_' ::= {{ com Dimension order (store region). }}
 | st :: :: st {{ com $\left<\text{Space}, \text{Time}\right>$ region. }}
 | ts :: :: ts {{ com $\left<\text{Time}, \text{Space}\right>$ region. }}

Space {{ tex \varsigma }} :: 'Space_' ::= {{ com Spaces. }}
 | here :: :: here {{ com Here. }}
 | here ( s ) :: :: fractal {{ com Fractal aspect of Here. }}
 | subSpace ( Space , s ) :: M :: subSpace  {{ tex [[Space]]([[s]]) }} {{ com Subspace $[[s]]$ of space $[[Space]]$. }}

Moment {{ tex \psi }} :: 'Moment_' ::= {{ com Moments. }}
 | now :: :: now {{ com Now. }}
 | now ( s ) :: :: fractal {{ com Fractal aspect of Now. }}
 | subMoment ( Moment , s ) :: M :: subMoment {{ tex [[Moment]]([[s]]) }} {{ com Submoment $[[s]]$ of moment $[[Moment]]$. }}

v :: 'v_' ::= {{ com Values. }}
 | thunk ( e ) :: :: thunk {{ com Thunk. }}
 | sym s :: :: symbol {{ com Symbol. }}
 | ptr p :: :: pointer {{ com Pointer. }}
 | sp Space :: :: space {{ com Space. }}
 | mt Moment :: :: moment {{ com Moment. }}
 | vv :: :: rest {{ com (Existing value forms, from host PL.) }}

vv {{ tex \cdots }} :: 'v_' ::= {{ com Values (continued). }}
 | \ x . e :: :: lambda {{ com Lambda. }}
 | x :: :: var {{ com Variable. }}
 | ( v1 , v2 ) :: :: pair {{ com Pair. }}
 | value ( Graph , pp ) :: M :: valueOfGraphNode {{ com Value of graph node~$[[pp]]$ in graph~$[[Graph]]$. }}
 | value ( A ) :: M :: valueOfEdgeAction {{ com Value of edge action $[[A]]$. }}

e :: 'e_' ::= {{ com Expressions. }}
 | thunk ( e ) :: :: thunk {{ com Thunk. }}
 | force ( e ) :: :: force {{ com Force. }}
 | put ( e1 , e2 , e3 ) :: :: putThree {{ com Put (fully-qualified). }}
 | put ( e1 , e2 ) :: :: putTwo {{ com Put (into current moment). }}
 | get ( e ) :: :: get {{ com Get. }}
 | here ( ) :: :: here {{ com Here. }}
 | now ( ) :: :: now {{ com Now. }}
 | do C ( e1 ) { e2 } :: :: do {{ com Do. }}
 | do @ e1 { e2 } :: M :: doAt {{ com Do-at. Shorthand syntax. }}
 | do @ e1 within e2 { e3 } :: M :: doAtWithin {{ com Do-at-with. Shorthand syntax. }}
 | do @ within e1 { e2 } :: M :: doAtWithin2 {{ com Do-at-with, same space. }}
 | ee :: :: rest {{ com (Existing expression forms, from host PL.) }}

ee {{ tex \cdots }} :: 'e_' ::= {{ com Expressions (continued). }}
 | let x = e1 in e2 :: :: let {{ com Let sequencing. }}
 | let x = e1 in :: M :: letHead
 | e1 ( e2 ) :: :: apply {{ com Application. }}
 | e1 - e2 :: :: symbolDash {{ com Minus binop. }}
 | e1 . e2 :: :: symbolDot {{ com Dot binop. }}
 | [ v / x ] e :: M :: subst {{ com Substituion. }}
 | v :: :: value {{ com Value. }}
 | ( e ) :: M :: paren {{ com Paren. }}


C :: 'C_' ::= {{ com Do context. }}
 | CxtVerb CxtDim :: :: context {{ com Verb and dimension. }}

CxtVerb :: 'ContextVerb_' ::= {{ com Context verb. }}
 | within :: :: within {{ com Within. }}
 | goto :: :: goto {{ com Goto. }}

CxtDim :: 'ContextDim_' ::= {{ com Context dimension. }}
 | space :: :: space {{ com Space dimension. }}
 | moment :: :: moment {{ com Time dimension. }}


Path {{ tex \pi }} :: 'Path_' ::= {{ com Paths. }}
 | empty :: :: empty {{ tex \cdot }} {{ com Empty (no evaluating thunk pointers). }}
 | Path , pp :: :: pointer {{ com Thunk pointer~$[[pp]]$ evaluating at~$[[Path]]$. }}
 % xxx/to do -- separate into two grammars for Path, not one fused one:
 | Path , ppp :: :: precisePointer {{ com Thunk pointer~$[[ppp]]$ evaluating at~$[[Path]]$. }}


%----------------------------

IncGrammar :: '' ::= {{ com \textbf{Incremental Graph Semantics} (below) }}
|  :: :: 'IncGrammar' {{ tex --- }}

%----------------------------

m :: 'm_' ::= {{ com Meta-moments, as tagged natural numbers. }}
| nextMetaMoment ( Graph ) :: :: nextMetaMoment {{ com get the next meta moment from the graph. }}

n :: 'n_' ::= {{ com Edge identifers, as tagged natural numbers. }}

ppp {{ tex \dot{\tilde{p} } }} , qqq {{ tex \dot{\tilde{q} } }} :: 'ppp_' ::= {{ com Graph-node pointers. }}
 | ( pp , m ) :: :: pointer {{ com Full pointer~$[[pp]]$ at meta-moment~$[[m]]$ }}
 | top ( Path ) :: M :: topOfPath {{ com Top of path. }}

t :: 't_' ::= {{ com Local traces. A list of edge identifiers. }}
 | empty :: :: empty {{ com Empty. }} {{ tex \cdot }}
 | t1 , t2 :: :: sequence {{ com Sequence. }}
 | n :: :: edge {{ com Edge (identified as $[[n]]$) }}
 | trace ( Graph , ppp ) :: M :: getTrace {{ com get a node's trace from graph. }}
 | incomingEdges ( Graph , ppp ) :: M :: incomingEdges {{ com Incoming edges of node~$[[ppp]]$, in an arbitrary order. }}

Graph {{ tex G }} :: 'Graph_' ::= {{ com Graphs. }}
 | empty :: :: empty {{ com Empty. }} {{ tex \cdot }}
 | Graph1 , Graph2 :: :: union {{ com Disjoint union. }} {{ tex [[Graph1]] \cupdot [[Graph2]] }}
 | ppp |-> node :: :: node {{ com Graph node (cell). }}
 | n |-> edge :: :: edge {{ com Graph edge. }}
 | Graph { ppp |-> node } :: M :: nodeUpdate
 | Graph { n |-> edge } :: M :: edgeUpdate

node :: 'node_' ::= {{ com Nodes (graph cells). }}
 | NonThunk v :: :: NonThunk {{ com Non-thunk. }} {{ tex [[v]] }}
 | Thunk ( Space , e , cache ) :: :: Thunk {{ com Thunk. }} {{ tex \left<[[Space]], [[e]], [[cache]]\right> }}

cache {{ tex \dot{\tilde{v} } }} :: 'cache_' ::= {{ com Thunk node's cache. }}
 | empty :: :: empty {{ com Empty. }} {{ tex \bullet }}
 | ( t , v ) :: :: full {{ com Filled. }} {{ tex \left<[[t]], [[v]]\right> }}
 | _ :: M :: wildCardPattern

edge :: 'edge_' ::= {{ com Edges (graph cell relationships). }}
 | ppp -- A -- b --> qq :: :: edge {{ tex [[ppp]] \longrightarrow^{[[A]]}_{[[b]]} [[qq]] }} {{ com Edge data. }}

A :: 'A_' ::= {{ com Actions (and relevant values). }}
 | put ( v ) :: :: put {{ com Put value~$[[v]]$. }}
 | get ( v ) :: :: get {{ com Get value~$[[v]]$. }}
 | force ( v ) :: :: force {{ com Force edge target, resulting in~$[[v]]$. }}

DirtyActionPattern {{ tex \hat{A} }} :: 'Apat_' ::= {{ com Action patterns, for dirtying traversal. }}
 | misaligned ( Space , v ) :: :: misaligned {{ com Matches all actions misaligned with putting $([[Space]], [[v]])$. }}
 | forces :: :: forcing {{ com Matches all $\ottkw{force}$ actions, and no $\ottkw{put}$ nor $\ottkw{get}$ actions. }}

b :: 'b_' ::= {{ com Status bit. }}
 | clean :: :: clean {{ com Clean. }}
 | dirty :: :: dirty {{ com Dirty. }}

defns Ref :: '' ::=

defn
Store1 ; Path ; Moment ; Space |- e !! Store2 ; v
:: :: eval :: 'E_'
{{ tex [[Store1]] ; [[Path]] \vdash^{[[Space]]}_{[[Moment]]} [[e]] \Downarrow [[Store2]] ; [[v]] }}
by

------------------------------------------------------------- :: here
Store ; Path ; Moment ; Space |- here() !! Store ; sp Space

------------------------------------------------------------- :: now
Store ; Path ; Moment ; Space |- now() !! Store ; mt Moment

---------------------------------------------------------------- :: thunk
Store ; Path ; Moment ; Space |- thunk(e) !! Store ; thunk(e)


Store1 ; Path ; Moment ; Space |- e1 !! Store2 ; thunk(e2)
Store2 ; Path ; Moment ; Space |- e2 !! Store3 ; v
------------------------------------------------------------ :: forceThunk
Store1 ; Path ; Moment ; Space |- force(e1) !! Store3 ; v



------------------------------------------------------- :: sym
Store ; Path ; Moment ; Space |- sym s !! Store ; sym s

Store ; Path ; Moment ; Space |- e1 !! Store ; sym s1
Store ; Path ; Moment ; Space |- e2 !! Store ; sym s2
--------------------------------------------------------------- :: symMinus
Store ; Path ; Moment ; Space |- e1 - e2 !! Store ; sym s1-s2

Store ; Path ; Moment ; Space |- e1 !! Store ; sym s1
Store ; Path ; Moment ; Space |- e2 !! Store ; sym s2
--------------------------------------------------------------- :: symDot
Store ; Path ; Moment ; Space |- e1 . e2 !! Store ; sym s1.s2

Store ; Path ; Moment ; Space |- e1 !! Store ; sym s1
Store ; Path ; Moment ; Space |- e2 !! Store ; sym s2
--------------------------------------------------------------- :: symApp
Store ; Path ; Moment ; Space |- e1(e2) !! Store ; sym s1(s2)


Store1 ; Path ; Moment ; Space |- e1 !! Store2 ; sym s
Store2 ; Path ; Moment ; subSpace(Space, s) |- e2 !! Store3 ; v
--------------------------------------------------------------------------- :: withinSpace
Store1 ; Path ; Moment ; Space |- do within space(e1) { e2 } !! Store3 ; v

Store1 ; Path ; Moment ; Space1 |- e1 !! Store2 ; sp Space2
Store2 ; Path ; Moment ; Space2 |- e2 !! Store3 ; v
--------------------------------------------------------------------------- :: gotoSpace
Store1 ; Path ; Moment ; Space1 |- do goto space(e1) { e2 } !! Store3 ; v

Store1 ; Path ; Moment ; Space |- e1 !! Store2 ; sym s
Store2 |- undelay(Store2, subMoment(Moment, s)) !! Store3
Store3 ; Path ; subMoment(Moment, s) ; Space |- e2 !! Store4 ; v
--------------------------------------------------------------------------- :: withinMoment
Store1 ; Path ; Moment ; Space |- do within moment(e1) { e2 } !! Store4 ; v

Store1 ; Path ; Moment1 ; Space |- e1 !! Store2 ; mt Moment2
Store2 |- undelay(Store2, Moment2) !! Store3
Store3 ; Path ; Moment2 ; Space |- e2 !! Store4 ; v
--------------------------------------------------------------------------- :: gotoMoment
Store1 ; Path ; Moment ; Space |- do goto moment(e1) { e2 } !! Store4 ; v


Store1 ; Path ; Moment ; Space |- e1 !! Store2 ; sym s
Store2 ; Path ; Moment ; Space |- e2 !! Store3 ; v
(subSpace(Space, s), Moment)^st \notin Path
---------------------------------------------------------------------------------------------------------------- :: putImmediate
Store1 ; Path ; Moment ; Space |- put (e1, e2) !! Store3{ (subSpace(Space, s), Moment)^st |->(Space, v) } ; ptr subSpace(Space,s)


Store1 ; Path ; Moment1 ; Space |- e1 !! Store2 ; sym s
Store2 ; Path ; Moment1 ; Space |- e2 !! Store3 ; v
Store3 ; Path ; Moment1 ; Space |- e2 !! Store4 ; mt Moment2
--------------------------------------------------------------------------------------------------------------- :: putDelay
Store ; Path ; Moment1 ; Space |- put (e1, e2) !! Store4{ (subSpace(Space, s), Moment2)^ts |->(Space, v) } ; ptr subSpace(Space,s)


Store1 ; Path ; Moment ; Space1 |- e !! Store2 ; ptr Space2
Store2((Space2, Moment)^st) = NonThunk v
-------------------------------------------------------------------- :: getNonThunk
Store1 ; Path ; Moment ; Space1 |- get(e) !! Store2 ; v

Store1 ; Path ; Moment ; Space1 |- e !! Store2 ; ptr Space2
Store2((Space2, Moment)^st) = Thunk(Space0, e0, StoreValueOption)
------------------------------------------------------------------------------ :: getThunk
Store1 ; Path ; Moment ; Space1 |- get(e) !! Store2 ; (sp Space0, thunk(e0))



Store1 ; Path ; Moment ; Space1 |- e !! Store2 ; ptr Space0 
Store2((Space0, Moment)^st) = Thunk(Space2, e0, empty)
Store2 ; Path, (Space0, Moment)^st ; Moment ; Space2 |- e0 !! Store3 ; v
----------------------------------------------------------------------------------------- :: emptyForce
Store1 ; Path ; Moment ; Space1 |- force(e) !! Store3{ (Space0, Moment)^st |-> Thunk(Space2, e0, (Store2, v)) } ; v

Store1 ; Path ; Moment ; Space1 |- e !! Store2 ; ptr Space0
Store2((Space0, Moment)^st) = Thunk(Space2, e0, (Store0, v))
Store0 <= Store2
--------------------------------------------------------- :: reuseForce
Store1 ; Path ; Moment ; Space1 |- force(e) !! Store2 ; v

Store1 ; Path ; Moment ; Space1 |- e !! Store2 ; ptr Space0
Store2((Space0, Moment)^st) = Thunk(Space2, e0, (Store0, v0))
Store0 </= Store2
Store2 ; Path, (Space0, Moment)^st ; Moment ; Space2 |- e0 !! Store3 ; v
---------------------------------------------------------------------------------------- :: redoForce
Store1 ; Path ; Moment ; Space1 |- force(e) !! Store3{ (Space0, Moment)^st |-> Thunk(Space2, e0, (Store2, v)) } ; v


defn
Store1 |- undelay ( Store2 , Moment ) !! Store3
:: :: undelay :: 'undelay_'
by


----------------------------------- :: empty
Store |- undelay (empty, Moment) !! Store


Store |- undelay (Store1, Moment) !! Store'
Store' |- undelay (Store2, Moment) !! Store''
--------------------------------------------- :: binary
Store |- undelay (Store1, Store2, Moment) !! Store''

----------------------------------------------------------------------------------------------------- :: moment
Store |- undelay( (Space, Moment)^ts |-> cell, Moment ) !! Store{ (Space, Moment)^ts |/-> }{(Space, Moment)^st |-> cell }

Moment1 != Moment2
----------------------------------------------------------------------------------------------------- :: skipMoment
Store |- undelay( (Space, Moment1)^ts |-> cell, Moment2 ) !! Store

----------------------------------------------------------------------------------------------------- :: skipSpace
Store |- undelay( (Space, Moment1)^st |-> cell, Moment2 ) !! Store

defn
Store1 </= Store2
:: :: notAligned :: 'NA_'
{{ tex [[Store1]] \not\leq [[Store2]] }}
by

Store1(pp) = cell1
Store2(pp) = cell2
pp |-> cell1 </= pp |-> cell2
--------------------------------- :: focus
Store1 </= Store2

Space /= Space' \/ e /= e'
------------------------------------------------------ :: changed
pp |-> Thunk(Space,e,_) </= pp |-> Thunk(Space',e',_)


StoreValueOption /= empty
------------------------------------------------------------------------ :: forgot
pp |-> Thunk(Space,e,StoreValueOption) </= pp |-> Thunk(Space',e',empty)


defn
Store1 <= Store2
:: :: aligned :: 'A_'
{{ tex [[Store1]] \leq [[Store2]] }}
by


---------------- :: empty
empty <= Store


Store1 <= Store3
Store2 <= Store4
----------------------------------- :: binary
Store1 , Store2 <= Store3 , Store4

Store1 == Store3
Store3 <= Store4
Store4 == Store2
----------------------------------- :: equiv
Store1 <= Store2


-------------------------- :: cell
pp |-> cell <= pp |-> cell

---------------------------------------------------- :: cache
pp |-> Thunk(Space,e,empty) <= pp |-> Thunk(Space,e,(Store,v))


defns Inc :: '' ::=

defn
Graph1 ; Path ; Moment ; m ; Space |- e !! Graph2 ; t ; v
:: :: incEval :: 'IE_'
{{ tex [[Graph1]] ; [[Path]] \vdash^{[[Space]]}_{[[Moment]], [[m]]} [[e]] \Downarrow [[Graph2]]; [[t]]; [[v]] }}
by

Graph1; Path; Moment; m; Space1 |- e !! Graph2; t; ptr Space2
ppp = ((Space2, Moment)^st, m)
Graph2(ppp) = Thunk(Space0, e0, empty)
Graph2; Path, ppp; Moment; m; Space0 |- e0 !! Graph3; t3; v3
addEdge(Graph3{ ppp |-> Thunk(Space0, e0, (t3, v3)) }, top(Path)--force(v3)--clean--> (Space2, Moment)^st) = (Graph4, n)
------------------------------------------------------------------------------------------------------------- :: emptyForce
Graph1; Path; Moment; m; Space1 |- force(e) !! Graph4; t, n; v

Graph1; Path; Moment; m; Space1 |- e !! Graph2; t; ptr Space2
ppp = ((Space2, Moment)^st, m)
Graph2(ppp) = Thunk(Space0, e0, (t0, v0))
Graph2; Path; Moment; m; Space0 |- clean((Space2, Moment)^st) !! Graph3
Graph3((Space2, Moment)^st) = Thunk(Space0, e0, (t3, v3))
addEdge(Graph3{ ppp |-> Thunk(Space0, e0, (t3, v3)) }, top(Path)--force(v3)--clean--> (Space2, Moment)^st) = (Graph4, n)
--------------------------------------------------------------------------------- :: cleanForce
Graph1; Path; Moment; m; Space1 |- force(e) !! Graph4; t, n; v


defn
Graph1 ; Path ; Moment ; m ; Space |- clean ( pp ) !! Graph2
:: :: cleanNode :: 'CN_'
{{ tex [[Graph1]] ; [[Path]] \vdash^{[[Space]]}_{[[Moment]], [[m]]} \ottkw{clean}([[pp]]) \Downarrow [[Graph2]] }}
by

Graph1(pp) = Thunk(Space, e0, (t0, v0))
Graph1 ; Path ; Moment ; m ; Space |- clean ( t0 ) !! Graph2
-------------------------------------------------------------- :: aligned
Graph1 ; Path ; Moment ; m ; Space |- clean ( pp ) !! Graph2


Graph1(pp) = Thunk(Space0, e0, (t0, v0))
Graph1 ; Path ; Moment ; m1 ; Space |- misaligned( t0 ) !! Graph2
nextMetaMoment(Graph2) = m2
Graph2 ; Path ; Moment ; m2 ; Space0 |- e0 !! Graph3; t3; v3
Graph3{ (pp, m2) |-> Thunk(Space, e0, (t3, v3)) } = Graph4
------------------------------------------------------------------- :: misaligned
Graph1 ; Path ; Moment ; m1 ; Space |- clean ( pp ) !! Graph4


defn
Graph1 ; Path ; Moment ; m ; Space |- clean ( t ) !! Graph2
:: :: cleanTrace :: 'CT_'
{{ tex [[Graph1]] ; [[Path]] \vdash^{[[Space]]}_{[[Moment]], [[m]]} \ottkw{clean}([[t]]) \Downarrow [[Graph2]] }}
by

------------------------------------------------------------- :: empty
Graph ; Path ; Moment ; m ; Space |- clean ( empty ) !! Graph

Graph1 ; Path ; Moment ; m ; Space |- clean ( t1 ) !! Graph2
Graph2 ; Path ; Moment ; m ; Space |- clean ( t2 ) !! Graph3
----------------------------------------------------------------- :: binary
Graph1 ; Path ; Moment ; m ; Space |- clean ( t1, t2 ) !! Graph3


Graph(n) = ppp -- A -- clean --> qq
------------------------------------------------------- :: alreadyClean
Graph ; Path ; Moment ; m ; Space |- clean(n) !! Graph

Graph1(n) = ppp -- A -- dirty --> qq
Graph1 ; Path, qq ; Moment ; m ; Space |- clean(qq) !! Graph2
value(A) = value(Graph2, qq)
Graph3 = Graph2{ n |-> ppp --A--clean--> qq }
----------------------------------------------------------- :: dirtyIntoClean
Graph1 ; Path ; Moment ; m ; Space |- clean(n) !! Graph3


defn
Graph1 ; Path ; Moment ; m ; Space |- misaligned ( t ) !! Graph2
:: :: misaligned :: 'MA_'
{{ tex [[Graph1]] ; [[Path]] \vdash^{[[Space]]}_{[[Moment]], [[m]]} \ottkw{misaligned}([[t]]) \Downarrow [[Graph2]] }}
by

Graph2 ; Path ; Moment ; m ; Space |- misaligned ( t1 ) !! Graph2
---------------------------------------------------------------------- :: binL
Graph1 ; Path ; Moment ; m ; Space |- misaligned ( t1, t2 ) !! Graph2

Graph1 ; Path ; Moment ; m ; Space |- clean ( t1 ) !! Graph2
Graph2 ; Path ; Moment ; m ; Space |- misaligned ( t2 ) !! Graph3
--------------------------------------------------------------------- :: binR
Graph1 ; Path ; Moment ; m ; Space |- misaligned ( t1, t2 ) !! Graph3

Graph1(n) = ppp -- A -- dirty --> qq
Graph1 ; Path, qq ; Moment ; m ; Space |- clean(qq) !! Graph2
value(A) /= value(Graph2, qq)
--------------------------------------------------------------- :: edge
Graph1 ; Path ; Moment ; m ; Space |- misaligned(n) !! Graph2


defn
Graph1 ; Path ; Moment ; m ; Space |- clean ( t ) !! Graph2 ; b
:: :: revisedCleanTrace :: 'R_CT_'
{{ tex [[Graph1]] ; [[Path]] \vdash^{[[Space]]}_{[[Moment]], [[m]]} \ottkw{clean}([[t]]) \Downarrow [[Graph2]] ; [[b]] }}
by

----------------------------------------------------------------------- :: empty
Graph ; Path ; Moment ; m ; Space |- clean ( empty ) !! Graph ; clean

Graph2 ; Path ; Moment ; m ; Space |- clean ( t1 ) !! Graph2 ; dirty
------------------------------------------------------------------------------ :: binL
Graph1 ; Path ; Moment ; m ; Space |- clean ( t1, t2 ) !! Graph2 ; dirty

Graph1 ; Path ; Moment ; m ; Space |- clean ( t1 ) !! Graph2 ; clean
Graph2 ; Path ; Moment ; m ; Space |- clean ( t2 ) !! Graph3 ; b
------------------------------------------------------------------------- :: binR
Graph1 ; Path ; Moment ; m ; Space |- clean ( t1, t2 ) !! Graph3 ; b

Graph(n) = ppp -- A -- clean --> qq
--------------------------------------------------------------- :: alreadyClean
Graph ; Path ; Moment ; m ; Space |- clean(n) !! Graph ; clean

Graph1(n) = ppp -- A -- dirty --> qq
Graph1 ; Path, qq ; Moment ; m ; Space |- clean(qq) !! Graph2
value(A) = value(Graph2, qq)
Graph3 = Graph2{ n |-> ppp --A--clean--> qq }
------------------------------------------------------------------------ :: dirtyIntoClean
Graph1 ; Path ; Moment ; m ; Space |- clean(n) !! Graph3 ; clean

Graph1(n) = ppp -- A -- dirty --> qq
Graph1 ; Path, qq ; Moment ; m ; Space |- clean(qq) !! Graph2
value(A) /= value(Graph2, qq)
------------------------------------------------------------------- :: misaligned
Graph1 ; Path ; Moment ; m ; Space |- clean(n) !! Graph2 ; dirty


defn
DirtyActionPattern ~~ A
:: :: actionMatches :: 'AM_'
by

defn
DirtyActionPattern ~/~ A
:: :: actionDoesNotMatch :: 'ANM_'
by


defn
Graph1 |- dirty ( DirtyActionPattern , ppp ) !! Graph2
:: :: dirtyNode :: 'Dirty_'
by

Graph1 |- dirty ( DirtyActionPattern , incomingEdges(Graph1, ppp) ) !! Graph2
------------------------------------------------------------------------------ :: node
Graph1 |- dirty ( DirtyActionPattern , ppp ) !! Graph2

defn
Graph1 |- dirty ( DirtyActionPattern , t ) !! Graph2
:: :: dirtyTrace :: 'Dirty_'
by

-------------------------------------------------- :: empty
Graph |- dirty(DirtyActionPattern, empty) !! Graph

Graph1 |- dirty(DirtyActionPattern, t1) !! Graph2
Graph2 |- dirty(DirtyActionPattern, t2) !! Graph3
------------------------------------------------------ :: binary
Graph1 |- dirty(DirtyActionPattern, t1,t2) !! Graph3


Graph(n) = ppp --A--dirty--> qq
------------------------------------------------ :: alreadyDirty
Graph |- dirty(DirtyActionPattern, n) !! Graph


Graph1(n) = ppp --A--clean--> qq
DirtyActionPattern ~~ A
Graph2 = Graph1{ n |-> ppp --A--dirty--> qq }
Graph2 |- dirty(forces, ppp) !! Graph3
------------------------------------------------- :: cleanToDirty
Graph1 |- dirty(DirtyActionPattern, n) !! Graph3

Graph(n) = ppp --A--clean--> qq
DirtyActionPattern ~/~ A
------------------------------------------------- :: stillClean
Graph |- dirty(DirtyActionPattern, n) !! Graph

defn
Graph1 <= Graph2
:: :: incAligned :: 'IA_'
{{ tex [[Graph1]] \leq [[Graph2]] }}
by


defn
Store ~~ Graph
:: :: equiv :: 'EQ_'
{{ tex [[Store]] \approx [[Graph]] }}
by
